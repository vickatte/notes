FunctionArn:
      Description: The ARN of the lambda function
      Value:
        'Fn::Join':
          - '/'
          - - 'Fn::Join':
              - ':'
              - - 'arn:aws:lambda'
                - Ref: 'AWS::Region'
                - Ref: 'AWS::AccountId'
                - 'function'
            - 'functionname'



!Sub
    - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function/${FunctionName}'
    - { FunctionName: Ref function }

https://theburningmonk.com/2019/05/cloudformation-protip-use-fnsub-instead-of-fnjoin/


{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogStreams"
    ],
      "Resource": [
        "arn:aws:logs:*:*:*"
    ]
  }
 ]
}
https://github.com/microsoft/azure-pipelines-tasks/tree/master/Tasks



Deploy.sh
https://octopus.com/docs/deployment-examples/custom-scripts/scripts-in-packages
https://octopus.com/docs/infrastructure/deployment-targets/linux/ssh-deployments

type assumerole1.sh
REGION=$1
DEFAULT_AWS_ACCESS_KEY_ID=$2
DEFAULT_AWS_SECRET_ACCESS_KEY=$3
TARGET_AWS_ROLE_ARN=$4
SESSION_NAME=eks_deploy_pipeline_`date +"%m-%d-%Y"-%H-%M-%S`
#aws configure set region "${REGION}" --profile default
#aws configure set aws_access_key_id "${DEFAULT_AWS_ACCESS_KEY_ID}" --profile default
#aws configure set aws_secret_access_key "${DEFAULT_AWS_SECRET_ACCESS_KEY}" --profile default

export AWS_DEFAULT_REGION=$REGION
export AWS_ACCESS_KEY_ID=$DEFAULT_AWS_ACCESS_KEY_ID
export AWS_SECRET_ACCESS_KEY=$DEFAULT_AWS_SECRET_ACCESS_KEY

KST=(`aws sts assume-role --role-arn $TARGET_AWS_ROLE_ARN --role-session-name $SESSION_NAME --query '[Credentials.AccessKeyId,Credentials.SecretAccessKey,Credentials.SessionToken]' --output text`)
unset AWS_SECURITY_TOKEN
export AWS_DEFAULT_REGION=$REGION
export AWS_ACCESS_KEY_ID=${KST[0]}
export AWS_SECRET_ACCESS_KEY=${KST[1]}
export AWS_SESSION_TOKEN=${KST[2]}
export AWS_SECURITY_TOKEN=${KST[2]}
